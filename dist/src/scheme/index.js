"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.luumToScss = exports.luumToCss = exports.eachArrayElement = exports.PAINT_MY_WAGON_RED = exports.RED = exports.isLuumScssRule = exports.isLuumCssRule = exports.key = exports.isLuumScssNestedRule = exports.isLuumScssPseudoClassRule = exports.isLuumCssAttribute = exports.isLuumSpecTransformer = exports.isLuumSpec = exports.maybe = exports.isFilter = exports.isFilterPoint = exports.isTransformer = exports.maybeIsOrContainsOnly = exports.content = exports.isArrayWhereEveryElement = exports.isUndefined = exports.isString = exports.isCssColorPropertyKey = exports.CSS_COLOR_PROPERTY_KEYS = exports.isCssPseudoClass = exports.CSS_PSEUDO_CLASSES = void 0;
const function_1 = require("fp-ts/lib/function");
const _1 = require("~");
const spec_1 = require("~/constants/spec");
const lum_1 = require("~/mixers/lum");
// export * from "./export"
// export * from "./import"
/* eslint-disable max-lines */
// export type InteractiveStates = `active` | `base` | `disabled` | `hover`
// export const HTML_ELEMENT_NAMES = [
//   `a`,
//   `abbr`,
//   `address`,
//   `area`,
//   `article`,
//   `aside`,
//   `audio`,
//   `b`,
//   `base`,
//   `bdi`,
//   `bdo`,
//   `big`,
//   `blockquote`,
//   `body`,
//   `br`,
//   `button`,
//   `canvas`,
//   `caption`,
//   `cite`,
//   `code`,
//   `col`,
//   `colgroup`,
//   `data`,
//   `datalist`,
//   `dd`,
//   `del`,
//   `details`,
//   `dfn`,
//   `dialog`,
//   `div`,
//   `dl`,
//   `dt`,
//   `em`,
//   `embed`,
//   `fieldset`,
//   `figcaption`,
//   `figure`,
//   `footer`,
//   `form`,
//   `h1`,
//   `h2`,
//   `h3`,
//   `h4`,
//   `h5`,
//   `h6`,
//   `head`,
//   `header`,
//   `hgroup`,
//   `hr`,
//   `html`,
//   `i`,
//   `iframe`,
//   `img`,
//   `input`,
//   `ins`,
//   `kbd`,
//   `keygen`,
//   `label`,
//   `legend`,
//   `li`,
//   `link`,
//   `main`,
//   `map`,
//   `mark`,
//   `menu`,
//   `menuitem`,
//   `meta`,
//   `meter`,
//   `nav`,
//   `noscript`,
//   `object`,
//   `ol`,
//   `optgroup`,
//   `option`,
//   `output`,
//   `p`,
//   `param`,
//   `picture`,
//   `pre`,
//   `progress`,
//   `q`,
//   `rp`,
//   `rt`,
//   `ruby`,
//   `s`,
//   `samp`,
//   `script`,
//   `section`,
//   `select`,
//   `small`,
//   `source`,
//   `span`,
//   `strong`,
//   `style`,
//   `sub`,
//   `summary`,
//   `sup`,
//   `table`,
//   `tbody`,
//   `td`,
//   `textarea`,
//   `tfoot`,
//   `th`,
//   `thead`,
//   `time`,
//   `title`,
//   `tr`,
//   `track`,
//   `u`,
//   `ul`,
//   `var`,
//   `video`,
//   `wbr`,
// ] as const
// export type HTMLElementName = typeof HTML_ELEMENT_NAMES[number]
// export type UniversalSelector = `*`
// export type TypeSelector = HTMLElementName | `body` | `html`
// export type ClassSelector = `.${string}`
// export type IdSelector = `#${string}`
// export type ParentSelector = `&`
// export type AttributeSelector = `["${string}"="${string}"]`
// export type CssSelectorCore =
//   | AttributeSelector
//   | ClassSelector
//   | IdSelector
//   | ParentSelector
//   | TypeSelector
//   | UniversalSelector
// export type CssCombinator = ` ` | ` + ` | ` > ` | ` ~ `
exports.CSS_PSEUDO_CLASSES = [
    `:active`,
    `:checked`,
    `:disabled`,
    `:enabled`,
    `:focus`,
    `:hover`,
    `:indeterminate`,
    `:visited`,
];
const isCssPseudoClass = (s) => exports.CSS_PSEUDO_CLASSES.includes(s);
exports.isCssPseudoClass = isCssPseudoClass;
// export type CssPseudoElement =
//   | `::after`
//   | `::backdrop`
//   | `::before`
//   | `::first-letter`
//   | `::first-line`
//   | `::placeholder`
//   | `::selection`
// export type CssSelectorExtension =
//   | AttributeSelector
//   | ClassSelector
//   | CssPseudoClass
//   | CssPseudoElement
//   | `${CssCombinator}${CssSelectorCore}`
// export type CssSelector =
//   | CssSelectorCore
//   | `${CssSelectorCore}${CssSelectorExtension}`
exports.CSS_COLOR_PROPERTY_KEYS = [
    `background-color`,
    `background`,
    `border-bottom-color`,
    `border-color`,
    `border-left-color`,
    `border-right-color`,
    `border-top-color`,
    `border`,
    `box-shadow`,
    `caret-color`,
    `color`,
    `column-rule-color`,
    `column-rule`,
    `filter`,
    `opacity`,
    `outline-color`,
    `outline`,
    `text-decoration-color`,
    `text-decoration`,
    `text-shadow`,
];
const isCssColorPropertyKey = (input) => typeof input === `string` &&
    (exports.CSS_COLOR_PROPERTY_KEYS.includes(input) ||
        input.startsWith(`--`));
exports.isCssColorPropertyKey = isCssColorPropertyKey;
const isString = (input) => typeof input === `string`;
exports.isString = isString;
const isUndefined = (input) => typeof input === `undefined`;
exports.isUndefined = isUndefined;
const isArrayWhereEveryElement = (isType) => (input) => Array.isArray(input) && input.every((item) => isType(item));
exports.isArrayWhereEveryElement = isArrayWhereEveryElement;
const content = (isType) => (input) => isType(input) || (0, exports.isArrayWhereEveryElement)(isType)(input);
exports.content = content;
const maybeIsOrContainsOnly = (isType) => (input) => (0, exports.isUndefined)(input) || (0, exports.content)(isType)(input);
exports.maybeIsOrContainsOnly = maybeIsOrContainsOnly;
const isTransformer = (validate) => (sample) => {
    const sampleIsValid = validate(sample);
    if (!sampleIsValid) {
        throw new Error(`Invalid test case: JSON.stringify(${sample})`);
    }
    return (input) => {
        if (typeof input !== `function`)
            return false;
        const testResult = input(sample);
        return validate(testResult);
    };
};
exports.isTransformer = isTransformer;
const isFilterPoint = (input) => typeof input === `object` &&
    typeof input.hue === `number` &&
    typeof input.sat === `number`;
exports.isFilterPoint = isFilterPoint;
const isFilter = (input) => (0, exports.isArrayWhereEveryElement)(exports.isFilterPoint)(input);
exports.isFilter = isFilter;
const maybe = (validate) => (input) => (0, exports.isUndefined)(input) || validate(input);
exports.maybe = maybe;
const isLuumSpec = (input) => typeof input === `object` &&
    input !== null &&
    typeof input.hue === `number` &&
    typeof input.sat === `number` &&
    typeof input.lum === `number` &&
    [`sat`, `lum`].includes(input.prefer);
exports.isLuumSpec = isLuumSpec;
exports.isLuumSpecTransformer = (0, exports.isTransformer)(exports.isLuumSpec)(spec_1.defaultSpec);
const isLuumCssAttribute = (input) => Array.isArray(input) &&
    input.length === 2 &&
    (0, exports.content)(exports.isCssColorPropertyKey)(input[0]) &&
    (0, exports.content)(exports.isLuumSpecTransformer)(input[1]);
exports.isLuumCssAttribute = isLuumCssAttribute;
const isLuumScssPseudoClassRule = (input) => input instanceof Array &&
    input.length === 2 &&
    (0, exports.content)(exports.isCssPseudoClass)(input[0]) &&
    (0, exports.content)(exports.isLuumCssAttribute)(input[1]);
exports.isLuumScssPseudoClassRule = isLuumScssPseudoClassRule;
const isLuumScssNestedRule = (input) => input instanceof Array &&
    input.length === 2 &&
    (0, exports.content)(exports.isString)(input[0]) &&
    (0, exports.content)(exports.isLuumCssAttribute)(input[1]);
exports.isLuumScssNestedRule = isLuumScssNestedRule;
const key = (k) => (obj) => obj[k];
exports.key = key;
const isLuumCssRule = (input) => typeof input === `object` &&
    input !== null &&
    (0, exports.isLuumSpec)(input.root) &&
    (0, exports.content)(exports.isLuumCssAttribute)((0, exports.key)(`attributes`)(input)) &&
    (0, exports.maybe)((0, exports.content)(exports.isString))((0, exports.key)(`rootSelectors`)(input)) &&
    (0, exports.maybe)(exports.isFilter)((0, exports.key)(`filter`)(input));
exports.isLuumCssRule = isLuumCssRule;
const isLuumScssRule = (input) => (0, exports.isLuumCssRule)(input) &&
    (0, exports.maybe)((0, exports.content)(exports.isLuumScssPseudoClassRule))((0, exports.key)(`states`)(input)) &&
    (0, exports.maybe)((0, exports.content)(exports.isLuumScssNestedRule))((0, exports.key)(`children`)(input));
exports.isLuumScssRule = isLuumScssRule;
exports.RED = {
    hue: 0,
    sat: 255,
    lum: 50,
    prefer: `sat`,
};
exports.PAINT_MY_WAGON_RED = {
    rootSelectors: [`.wagon`],
    root: exports.RED,
    attributes: [`background-color`, (0, lum_1.shade)(5)],
    states: [
        [
            [`:hover`, `:focus`],
            [`background-color`, (0, lum_1.shade)(10)],
        ],
        [`:active`, [`background-color`, (0, lum_1.shade)(15)]],
    ],
};
const eachArrayElement = (isType) => (input) => isType(input) ? [input] : Array.isArray(input) ? input.filter(isType) : [];
exports.eachArrayElement = eachArrayElement;
const LF = `\n`;
const join = (separator) => (a) => a.join(separator);
const map = (f) => (a) => a.map(f);
const luumToCss = (rule) => {
    const { attributes: oneOrManyAttributes, root, rootSelectors: maybeOneOrManyRootSelectors, filter: maybeFilter, } = rule;
    const rootSelectors = (0, function_1.pipe)(maybeOneOrManyRootSelectors, (0, exports.eachArrayElement)(exports.isString), join(`, ` + LF), (s) => (s ? s + ` {` + LF : ``));
    const attributes = (0, function_1.pipe)(oneOrManyAttributes, (0, exports.eachArrayElement)(exports.isLuumCssAttribute), map(([oneOrManyKeys, oneOrManyTransformers]) => {
        const transformers = (0, exports.eachArrayElement)(exports.isLuumSpecTransformer)(oneOrManyTransformers);
        console.log(transformers);
        const transformedSpec = transformers.reduce((acc, transformer) => transformer(acc), root);
        const hex = (0, _1.specToHex)(transformedSpec, maybeFilter);
        return (0, function_1.pipe)(oneOrManyKeys, (0, exports.eachArrayElement)(exports.isCssColorPropertyKey), map((key) => `${key}: ${hex}`), join(`; ` + LF));
    }), join(`; ` + LF));
    return rootSelectors ? join(LF)([rootSelectors, attributes, `}`]) : attributes;
};
exports.luumToCss = luumToCss;
const luumToScss = (rule) => {
    const { rootSelectors: maybeOneOrManyRootSelectors, root, attributes: oneOrManyAttributes, filter, states: maybeOneOrManyStates, children: maybeOneOrManyChildren, } = rule;
    const rootSelectors = (0, function_1.pipe)(maybeOneOrManyRootSelectors, (0, exports.eachArrayElement)(exports.isString), join(`, ` + LF));
};
exports.luumToScss = luumToScss;
// export const luumToScss = (rule: LuumScssRule): string => {
//   const { rootSelector, root, filter, attributes, states, children } = rule
//   let scss = ``
//   const depth = 0
//   if (rootSelector) scss += `${rootSelector} {`
//   return ``
// }
//# sourceMappingURL=data:application/json;base64,