"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const filters_1 = require("../constants/filters");
const hueToRelativeChannels_1 = __importDefault(require("../import/hueToRelativeChannels"));
const solveFor_1 = require("../solveFor");
const utils_1 = require("../utils");
const minChannelsForSaturationFromHue = (hue) => {
    const relativeChannels = (0, hueToRelativeChannels_1.default)(hue);
    const channelSpreader = (trueSaturation) => {
        const makeMinChannel = (idx) => Math.round(relativeChannels[idx] * trueSaturation);
        return {
            R: makeMinChannel(0),
            G: makeMinChannel(1),
            B: makeMinChannel(2),
        };
    };
    return channelSpreader;
};
const channelsFromIlluminationObj = ({ minChannels, trueLuminosity, minLum, }) => {
    const { max, round } = Math;
    const maxWhite = 255 - max(...Object.values(minChannels));
    const white = (0, utils_1.clamp)(round((trueLuminosity - minLum) * 255), [0, maxWhite]);
    const channels = {
        R: minChannels.R + white,
        G: minChannels.G + white,
        B: minChannels.B + white,
    };
    return channels;
};
const specToChannelsFixLimit = ({ hue, sat, lum, prefer = `lum` }, filter = filters_1.unfiltered) => {
    const minChannelsForSaturation = minChannelsForSaturationFromHue(hue);
    let trueSaturation;
    let trueLuminosity;
    let minChannels;
    let maxChannels;
    let specificLum;
    let minLum = 0;
    let maxLum = 1;
    let maxSat = (0, solveFor_1.maxSatForHueInFilter)(hue, filter);
    switch (prefer) {
        case `sat`:
            trueSaturation = (0, utils_1.clamp)(Math.min(sat, maxSat), [0, 255]);
            minChannels = minChannelsForSaturation(trueSaturation);
            maxChannels = {
                R: minChannels.R + 255 - trueSaturation,
                G: minChannels.G + 255 - trueSaturation,
                B: minChannels.B + 255 - trueSaturation,
            };
            minLum = (0, solveFor_1.lumFromChannels)(minChannels);
            maxLum = (0, solveFor_1.lumFromChannels)(maxChannels);
            trueLuminosity = (0, utils_1.clamp)(lum, [minLum, maxLum]);
            break;
        case `lum`:
            trueLuminosity = (0, utils_1.clamp)(lum, [0, 1]);
            specificLum = (0, solveFor_1.specificLumFromHue)(hue);
            maxSat = Math.min(maxSat, Math.round(trueLuminosity <= specificLum
                ? 255 * (trueLuminosity / specificLum)
                : (255 * (1 - trueLuminosity)) / (1 - specificLum)));
            trueSaturation = Math.min(sat, maxSat);
            minChannels = minChannelsForSaturation(trueSaturation);
            minLum = (0, solveFor_1.lumFromChannels)(minChannels);
            break;
    }
    const channels = channelsFromIlluminationObj({
        minChannels,
        trueLuminosity,
        minLum,
    });
    return {
        channels,
        fix: {
            sat: trueSaturation,
            lum: trueLuminosity,
        },
        limit: {
            sat: [0, maxSat],
            lum: [prefer === `lum` ? 0 : minLum, maxLum],
        },
    };
};
exports.default = specToChannelsFixLimit;
//# sourceMappingURL=data:application/json;base64,